brcompftssim0 <- list(C1 = 10, C2 = 6, C3 = 7, C4 = 10, H = 3.6,  M = 3.7, P1 = 10, P2 = 3, P3 = 4, P4 = 10)
brsim0 <- sim1cycle(sys = br, ctypes = brctypes, compfts = brcompftssim, n0y0 = brn0y0, beta = brbeta,
tnowstep = 0.25, hor = 4, tprep = 1, trepa = 0, seqlen = 401, prior = FALSE)
brcompftssim0 <- list(C1 = 10, C2 = 6, C3 = 7, C4 = 10, H = 3.6,  M = 3.7, P1 = 10, P2 = 3, P3 = 4, P4 = 10)
brsim0 <- sim1cycle(sys = br, ctypes = brctypes, compfts = brcompftssim, n0y0 = brn0y0, beta = brbeta,
tnowstep = 0.25, hor = 4, tprep = 1, trepa = 0, seqlen = 401, prior = FALSE)
brsim0 <- sim1cycle(sys = br, ctypes = brctypes, compfts = brcompftssim0, n0y0 = brn0y0, beta = brbeta,
tnowstep = 0.25, hor = 4, tprep = 1, trepa = 0, seqlen = 401, prior = FALSE)
brsim0$res
names(brsim0)
brsim0$nnyn
brsim0$tend
brsim0$downtime
names(brsim0)
brsim0$costrate
source('~/work/weibull-papers/cbm-rbd/cbm-sim.R')
head(brtaus2fine)
tail(brtaus2fine)
tail(brtaus1fine)
brsim1 <- sim1cycle(sys = br, ctypes = brctypes, compfts = brcompftssim, n0y0 = brn0y0, beta = brbeta,
tnowstep = 0.1, hor = 4, tprep = 0.5, trepa = 0, seqlen = 401, prior = FALSE)
head(brsim1$res)
tail(brsim1$res)
tail(brsim1$res[80:85,])
tail(brsim1$res[89:83,])
tail(brsim1$res[79:83,])
brcompftssim <- list(C1 = 10, C2 = 6, C3 = 7, C4 = 10, H = 8,  M = 12, P1 = 10, P2 = 3, P3 = 4, P4 = 10)
source('~/work/weibull-papers/cbm-rbd/cbm-sim.R')
brsim1 <- sim1cycle(sys = br, ctypes = brctypes, compfts = brcompftssim, n0y0 = brn0y0, beta = brbeta,
tnowstep = 0.1, hor = 4, tprep = 0.5, trepa = 0, seqlen = 401, prior = FALSE)
failedcompsnow
rm(failedcompsnow)
failedcompsnow
brsim1 <- sim1cycle(sys = br, ctypes = brctypes, compfts = brcompftssim, n0y0 = brn0y0, beta = brbeta,
tnowstep = 0.1, hor = 4, tprep = 0.5, trepa = 0, seqlen = 401, prior = FALSE)
source('~/work/weibull-papers/cbm-rbd/cbm-sim.R')
brsim1 <- sim1cycle(sys = br, ctypes = brctypes, compfts = brcompftssim, n0y0 = brn0y0, beta = brbeta,
tnowstep = 0.1, hor = 4, tprep = 0.5, trepa = 0, seqlen = 401, prior = FALSE)
tail(brsim1$res[79:83,])
brsim1$res[81,]
brsim1$res[81,]$tnow
brsim1$res[81,]$tnow == 8
round(8.00001, 2)
round(7.99000001, 2)
round(7.99000001, 3)
round(7.99900001, 3)
round(7.99990001, 3)
round(7.99990001, 5)
source('~/work/weibull-papers/cbm-rbd/cbm-sim.R')
brsim1 <- sim1cycle(sys = br, ctypes = brctypes, compfts = brcompftssim, n0y0 = brn0y0, beta = brbeta,
tnowstep = 0.1, hor = 4, tprep = 0.5, trepa = 0, seqlen = 401, prior = FALSE)
brsim1pr <- sim1cycle(sys = br, ctypes = brctypes, compfts = brcompftssim, n0y0 = brn0y0, beta = brbeta,
tnowstep = 0.1, hor = 4, tprep = 0.5, trepa = 0, seqlen = 401, prior = TRUE)
brcompftssim0 <- list(C1 = 10, C2 = 6, C3 = 7, C4 = 10, H = 3.6,  M = 3.7, P1 = 10, P2 = 3, P3 = 4, P4 = 10)
brsim0 <- sim1cycle(sys = br, ctypes = brctypes, compfts = brcompftssim0, n0y0 = brn0y0, beta = brbeta,
tnowstep = 0.25, hor = 4, tprep = 1, trepa = 0, seqlen = 401, prior = FALSE)
library(actuar) # provides dinvgamma(x, shape, scale) where shape = alpha and scale = beta
library(ReliabilityTheory)
library(ggplot2)
library(reshape2)
library(gridExtra)
ggplot(melt(ocgnow0, id="tau"), aes(x=tau, y=value)) + geom_line(aes(colour = variable))  + coord_cartesian(ylim=c(0,1))
qplot(brtnow0$t, brtnow0$rel)
qplot(brtnow8$t, brtnow8$rel)
Ccomp <- induced_subgraph(br, vids="C1")
brn0y0[1]
brn0y0[[1]]
Ccomp <- induced_subgraph(br, vids="C1")
Ccomp
plot(Ccomp)
Ccomp <- graph.formula(s -- C -- t)
Crel <- sysrelhor(computeSystemSurvivalSignature(Ccomp), brn0y0[1], brbeta[1], brfts0[1], tnow=0, hor=10, seqlen=201)
comphor <- 10; complen <- 201
Crel <- sysrelnowhor(computeSystemSurvivalSignature(Ccomp), brn0y0[1], brbeta[1], brfts0[1],
tnow = 0, hor = comphor, seqlen = complen)
comphor <- 10; complen <- 201
Ccomp <- graph.formula(s -- C -- t)
Ccomp <- setCompTypes(Ccomp, list(C = "C"))
Crel <- sysrelnowhor(computeSystemSurvivalSignature(Ccomp), brn0y0[1], brbeta[1], brfts0[1],
tnow = 0, hor = comphor, seqlen = complen)
head(Crel)
tail(Crel)
onecomp <- graph.formula(s -- 1 -- t)
Ccomp <- setCompTypes(onecomp, list(C = "1"))
Crel <- sysrelnowhor(computeSystemSurvivalSignature(Ccomp), brn0y0[1], brbeta[1], brfts0[1],
tnow = 0, hor = comphor, seqlen = complen)
Hrel <- sysrelnowhor(computeSystemSurvivalSignature(Hcomp), brn0y0[2], brbeta[2], brfts0[2],
tnow = 0, hor = comphor, seqlen = complen)
Ccomp <- setCompTypes(onecomp, list(C = "1"))
Hcomp <- setCompTypes(onecomp, list(H = "1"))
Mcomp <- setCompTypes(onecomp, list(M = "1"))
Pcomp <- setCompTypes(onecomp, list(P = "1"))
Hrel <- sysrelnowhor(computeSystemSurvivalSignature(Hcomp), brn0y0[2], brbeta[2], brfts0[2],
tnow = 0, hor = comphor, seqlen = complen)
Mrel <- sysrelnowhor(computeSystemSurvivalSignature(Mcomp), brn0y0[3], brbeta[3], brfts0[3],
tnow = 0, hor = comphor, seqlen = complen)
Prel <- sysrelnowhor(computeSystemSurvivalSignature(Pcomp), brn0y0[4], brbeta[4], brfts0[4],
tnow = 0, hor = comphor, seqlen = complen)
head(Crel)
head(melt(Crel))
head(Crel)
head(melt(Crel, id="C"))
compdf <- rbind(data.frame(Crel, comp = "C"), data.frame(Hrel, comp = "H"),
data.frame(Mrel, comp = "M"), data.frame(Prel, comp = "P"))
dim(compdf)
head(compdf)
tauhistfig1
?facet_wrap
comppriorfig1 <- ggplot(compdf, aes(x = t, y = rel)) + geom_line(aes(group = comp)) + #xlab(expression(t[now])) +
ylab("Reliability") + #guides(colour = guide_legend(title=NULL)) +
#  facet_grid(variable ~ ., scales = "free_y")
facet_wrap(~ comp, nrow = 2, scales = "free_y") + coord_cartesian(ylim = c(0, 1))
comppriorfig1
pdf("comppriorfig1.pdf", width = 6, height = 4)
comppriorfig1
dev.off()
comppriorfig1 <- ggplot(compdf, aes(x = t, y = rel)) + geom_line(aes(group = comp)) +
ylab("Reliability") + scale_x_continuous(breaks=seq(0, 10, by=2), minor_breaks=0:10) +
facet_wrap(~ comp, nrow = 2, scales = "free_y") + coord_cartesian(ylim = c(0, 1))
comppriorfig1
pdf("comppriorfig1.pdf", width = 6, height = 4)
comppriorfig1
dev.off()
comppriorfig2 <- ggplot(compdf, aes(x = t, y = rel)) + geom_line(aes(linetype = comp)) +
ylab("Reliability") + scale_x_continuous(breaks=seq(0, 10, by=2), minor_breaks=0:10) +
#guides(colour = guide_legend(title=NULL)) +
coord_cartesian(ylim = c(0, 1))
comppriorfig2
comppriorfig2 <- ggplot(compdf, aes(x = t, y = rel)) + geom_line(aes(linetype = comp)) +
ylab("Reliability") + scale_x_continuous(breaks=seq(0, 10, by=2), minor_breaks=0:10) +
guides(linetype = guide_legend(title=NULL)) + coord_cartesian(ylim = c(0, 1))
comppriorfig2
pdf("comppriorfig2.pdf", width = 6, height = 4)
comppriorfig2
dev.off()
tail(brsim0)
tail(brsim0$res)
brcompfts
length(brcompfts)
sapply(brcompfts, length)
?all.equal
length(brcompfts[1])
length(brcompfts[[1]])
asdf <- brcompfts
asdf
asdf <- lapply(asdf, function(x) c(x, x+1))
asdf
lapply(asdf, function(x) x[1])
brsim1$nnyn
simNcycle <- function(sys, ctypes, compfts, n0y0, beta, tnowstep, hor, tprep, trepa = 0,
seqlen = 101, prior = FALSE, cu = 1, cp = 0.2, onecycle = TRUE, timeround = 5){
N <- length(compfts[[1]])
if (any(sapply(compfts, length) != N))
stop("each element of compfts must contain the same number of failure times")
compftsi <- lapply(compfts, function(x) x[1])
n0y0i <- n0y0
res <- list()
for (i in 1:N){
cat("Operational cycle ", i, "\n")
res[[i]] <- sim1cycle(sys = sys, ctypes = ctypes, compfts = compftsi, n0y0 = n0y0i, beta = beta,
tnowstep = tnowstep, hor = hor, tprep = tprep, trepa = trepa, seqlen = seqlen,
prior = prior, cu = cu, cp = cp, onecycle = onecycle, timeround = timeround)
if (i < N){ # update stuff for next cycle
compftsi <- lapply(compfts, function(x) x[i + 1])
n0y0i <- res[[i]]$nnyn
}
}
return(res)
}
?rweibull
brcompftssim2 <- list(C1 = c(10, 10), C2 = c(6, 6), C3 = c(7, 7), C4 = c(10, 10), H = c(8, 8),
M = c(12, 12), P1 = c(10, 10), P2 = c(3, 3), P3 = c(4, 4), P4 = c(10, 10))
simNcycle <- function(sys, ctypes, compfts, n0y0, beta, tnowstep, hor, tprep, trepa = 0, seqlen = 101,
prior = FALSE, cycleupdate = TRUE, cu = 1, cp = 0.2, onecycle = TRUE, timeround = 5){
N <- length(compfts[[1]])
if (any(sapply(compfts, length) != N))
stop("each element of compfts must contain the same number of failure times")
compftsi <- lapply(compfts, function(x) x[1])
n0y0i <- n0y0
res <- list()
for (i in 1:N){
cat("Operational cycle ", i, "\n")
res[[i]] <- sim1cycle(sys = sys, ctypes = ctypes, compfts = compftsi, n0y0 = n0y0i, beta = beta,
tnowstep = tnowstep, hor = hor, tprep = tprep, trepa = trepa, seqlen = seqlen,
prior = prior, cu = cu, cp = cp, onecycle = onecycle, timeround = timeround)
if (i < N){ # update stuff for next cycle
compftsi <- lapply(compfts, function(x) x[i + 1])
if (cycleupdate)
n0y0i <- res[[i]]$nnyn
}
}
return(res)
}
brsim2pr <- sim1cycle(sys = br, ctypes = brctypes, compfts = brcompftssim2, n0y0 = brn0y0, beta = brbeta,
tnowstep = 0.1, hor = 4, tprep = 0.5, trepa = 0, seqlen = 401, prior = TRUE)
sim1cycle <- function(sys, ctypes, compfts, n0y0, beta, tnowstep, hor, tprep, trepa = 0,
seqlen = 101, prior = FALSE, cu = 1, cp = 0.2, onecycle = TRUE, timeround = 5){
K <- length(ctypes)
ftschron <- sort(unlist(compfts)) # when something fails
# initializing: initial arguments for gnowhor
tnow <- 0
sysnow <- sys
signnow <- sign <- computeSystemSurvivalSignature(sysnow)
wctnow <- 1:K       # which component types are now present in the system?
ftsnow <- as.list(rep(list(NULL), K))
failedcompsnow <- numeric(0)
gotonext <- TRUE     # indicator that loop should go on
failed <- FALSE      # indicator whether the system has failed
repschedfor <- Inf   # for which time is repair scheduled?
res <- data.frame() # initialize results data frame
while(gotonext){
cat("tnow =", tnow, ": ") #"failedcompsnow =", failedcompsnow, "\n")
if (!failed){ # if not failed already in previous loop, check...
if (all(signnow$Probability == 0)){ # system has failed now, schedule repair for tnow + tprep if not scheduled already
failed <- TRUE
taustarnow <- NA
if (repschedfor == Inf)
repschedfor <- tnow + tprep
} else { # system has not failed this time
if (repschedfor == Inf){ # no repair scheduled yet
# calculate current taustar
gnowvec <- gnowhor(signnow, n0y0[wctnow], beta[wctnow], ftsnow[wctnow], tnow, hor = hor,
seqlen = seqlen, prior = prior, cu = cu, cp = cp, onecycle = onecycle)
taustarnow <- gnowvec$tau[which.min(gnowvec$gnow)] - tnow
if (taustarnow <= tprep){ # schedule repair for tnow + tprep if not scheduled already
repschedfor <- tnow + tprep
} # else do nothing & go on to next loop (repschedfor is still Inf)
} else { # repair already scheduled: do nothing
taustarnow <- NA
}
} # end "system has not failed this time"
} else { # system was in failed state already at start of loop
taustarnow <- NA
}
# now we know if failed or not, if and when repair scheduled
cat("failed =", failed, "taustar =", taustarnow, "repschedfor =", repschedfor, "\n")
if (tnow >= repschedfor){ # time for repair has come, operational cycle ends
gotonext <- FALSE
}
# write all current things in results data frame
resnow <- data.frame(tnow = tnow, failed = failed, taustar = taustarnow, repschedfor = repschedfor)
res <- rbind(res, resnow)
# now prepare for next loop
tnow <- round(tnow + tnowstep, timeround)
# update stuff if system not failed (otherwise not needed except tnow update!)
if (!failed){
failedcompsnow <- ftschron[ftschron <= tnow]
if (length(failedcompsnow) > 0){ # update stuff only when the first component has failed
# recalculates everything from scratch (do this in a more clever way?)
sysnow <- induced_subgraph(sys, vids=V(sys)[!(name %in% names(failedcompsnow))])
# TODO: catch error when sysnow now contains vertices s and t only (suddenly all components fail)
signnow <- computeSystemSurvivalSignature(sysnow)
# to which fts list element do the failure times in failedcompsnow belong?
ftsnowindex <- sapply(ctypes, function(ctypesl) names(failedcompsnow) %in% ctypesl)
if (length(failedcompsnow) == 1)
ftsnowindex <- which(ftsnowindex)
else
ftsnowindex <- apply(ftsnowindex, 1, which)
# write failure times in corresponding list element
for (k in 1:K)
ftsnow[[k]] <- failedcompsnow[ftsnowindex == k]
# which component types are now present? (subset of 1:K)
wctnow <- which(names(ctypes) %in% names(signnow))
}
} # end update if system not failed
} # end while loop
# update Weibull parameters (all component types!) for next operational cycle
# get failure times from compftslist until time of repair repschedfor
ftslist <- as.list(rep(list(NULL), K))
ftsfinal <- ftschron[ftschron <= repschedfor]
ftsindex <- sapply(ctypes, function(ctypesl) names(ftsfinal) %in% ctypesl)
if (length(ftsfinal) == 1)
ftsindex <- which(ftsindex)
else
ftsindex <- apply(ftsindex, 1, which)
for (k in 1:K)
ftslist[[k]] <- ftsfinal[ftsindex == k]
# censoring time is last repschedfor, number of censored components from
censlist <- as.list(rep(list(NULL), K))
ek <- sapply(ftslist, length)
Nk <- apply(sign, 2, max)
Nk <- Nk[-length(Nk)]
ck <- Nk - ek
for (k in 1:K)
censlist[[k]] <- rep(repschedfor, ck[k])
nnyn <- nnynlist(n0y0, ftslist, censlist, beta) # updated parameters at end of cycle
# time the whole cycle took
tend <- repschedfor + trepa
# downtime and unit cost rate
if (failed){
downtime <- repschedfor - min(res$tnow[res$failed]) # only in tnowstep resolution!
costrate <- cu / tend
} else {
downtime <- 0
costrate <- cp / tend
}
# return res and all
list(res = res, nnyn = nnyn, tend = tend, downtime = downtime, costrate = costrate)
}
brsim2pr <- simNcycle(sys = br, ctypes = brctypes, compfts = brcompftssim2, n0y0 = brn0y0, beta = brbeta,
tnowstep = 0.1, hor = 4, tprep = 0.5, trepa = 0, seqlen = 401, prior = TRUE)
source('~/work/weibull-papers/cbm-rbd/cbm-sim.R')
brsim2pr <- simNcycle(sys = br, ctypes = brctypes, compfts = brcompftssim2, n0y0 = brn0y0, beta = brbeta,
tnowstep = 0.5, hor = 4, tprep = 0.5, trepa = 0, seqlen = 401, prior = TRUE)
brsim2pr <- simNcycle(sys = br, ctypes = brctypes, compfts = brcompftssim2, n0y0 = brn0y0, beta = brbeta,
tnowstep = 0.5, hor = 4, tprep = 0.5, trepa = 0, seqlen = 401, prior = TRUE, cycleupdate = FALSE)
C1sim1 <- rweibull(ncycles, shape = brbeta[1], scale = (failuretolambda(brmttf[1], brbeta[1]))^(1/brbeta[1]))
ncycles <- 5
C1sim1 <- rweibull(ncycles, shape = brbeta[1], scale = (failuretolambda(brmttf[1], brbeta[1]))^(1/brbeta[1]))
C1sim1
mean(C1sim1^brbeta[1])
sum(C1sim1^brbeta[1])/5
set.seed(1328)
ncycles <- 5
C1sim1 <- rweibull(ncycles, shape = brbeta[1], scale = (failuretolambda(brmttf[1], brbeta[1]))^(1/brbeta[1]))
C2sim1 <- rweibull(ncycles, shape = brbeta[1], scale = (failuretolambda(brmttf[1], brbeta[1]))^(1/brbeta[1]))
C3sim1 <- rweibull(ncycles, shape = brbeta[1], scale = (failuretolambda(brmttf[1], brbeta[1]))^(1/brbeta[1]))
C4sim1 <- rweibull(ncycles, shape = brbeta[1], scale = (failuretolambda(brmttf[1], brbeta[1]))^(1/brbeta[1]))
Hsim1  <- rweibull(ncycles, shape = brbeta[2], scale = (failuretolambda(brmttf[2], brbeta[2]))^(1/brbeta[2]))
C1sim1
C2sim1
C3sim1
C4sim1
Hsim1
Msim1  <- rweibull(ncycles, shape = brbeta[3], scale = (failuretolambda(brmttf[3], brbeta[3]))^(1/brbeta[3]))
P1sim1 <- rweibull(ncycles, shape = brbeta[4], scale = (failuretolambda(brmttf[4], brbeta[4]))^(1/brbeta[4]))
P2sim1 <- rweibull(ncycles, shape = brbeta[4], scale = (failuretolambda(brmttf[4], brbeta[4]))^(1/brbeta[4]))
P3sim1 <- rweibull(ncycles, shape = brbeta[4], scale = (failuretolambda(brmttf[4], brbeta[4]))^(1/brbeta[4]))
P4sim1 <- rweibull(ncycles, shape = brbeta[4], scale = (failuretolambda(brmttf[4], brbeta[4]))^(1/brbeta[4]))
Msim1
P1sim1
P2sim1
P3sim1
P4sim1
brcompftssim1
brcompftssim1 <- list(C1 = C1sim1, C2 = C2sim1, C3 = C3sim1, C4 = C4sim1, H = Hsim1,
M = Msim1, P1 = P1sim1, P2 = P2sim1, P3 = P3sim1, P4 = P4sim1)
brsimN5 <- simNcycle(sys = br, ctypes = brctypes, compfts = brcompftssim1, n0y0 = brn0y0, beta = brbeta,
tnowstep = 0.1, hor = 4, tprep = 0.5, trepa = 0, seqlen = 401)
brsimN5[[5]]$downtime
brsimN5[[4]]$downtime
brsimN5[[3]]$downtime
sapply(brsim5, function(res) res$downtime)
sapply(brsimN5, function(res) res$downtime)
sapply(brsimN5, function(res) res$tend)
sapply(brsimN5, function(res) res$costrate)
?mean
sapply(brsimN5, function(res) res$costrate)
weighted.mean(sapply(brsimN5, function(res) res$costrate), sapply(brsimN5, function(res) res$tend))
head(brsimN5[[1]]$res)
brsimN5taudf <- rbind(data.frame(cycle = 1, brsimN5[[1]]$res),
data.frame(cycle = 2, brsimN5[[2]]$res),
data.frame(cycle = 3, brsimN5[[3]]$res),
data.frame(cycle = 4, brsimN5[[4]]$res),
data.frame(cycle = 5, brsimN5[[5]]$res))
dim(brsimN5taudf)
head(brsimN5taudf)
brsimN5fig1 <- ggplot(brsimN5taudf, aes(x = tnow, y = taustar)) + geom_line(aes(colour = cycle)) +
xlab(expression(t[now])) + ylab(expression(paste(tau[*]^(t[now]), (t[now])))) +
guides(colour = guide_legend(title="Cycle"))
brsimN5fig1 <- ggplot(brsimN5taudf, aes(x = tnow, y = taustar)) + geom_line(aes(colour = cycle)) +
xlab(expression(t[now])) + ylab(expression(paste(tau[*]^(t[now]), (t[now])))) +
guides(colour = guide_legend(title="Cycle"))
brsimN5fig1 <- ggplot(brsimN5taudf, aes(x = tnow, y = taustar)) + geom_line(aes(colour = cycle)) +
xlab(expression(t[now])) + ylab(expression(paste(tau[ast]^(t[now]), (t[now])))) +
guides(colour = guide_legend(title="Cycle"))
brsimN5fig1
dim(brsimN5taudf)
table(brsimN5taudf$cycle)
brsimN5fig1 <- ggplot(brsimN5taudf, aes(x = tnow, y = taustar)) + geom_line(aes(colour = cycle, group = cycle)) +
xlab(expression(t[now])) + ylab(expression(paste(tau[ast]^(t[now]), (t[now])))) +
guides(colour = guide_legend(title="Cycle"))
brsimN5fig1
brsimN5taudf$cycle <- as.factor(brsimN5taudf$cycle)
brsimN5fig1 <- ggplot(brsimN5taudf, aes(x = tnow, y = taustar)) + geom_line(aes(colour = cycle, group = cycle)) +
xlab(expression(t[now])) + ylab(expression(paste(tau[ast]^(t[now]), (t[now])))) +
guides(colour = guide_legend(title="Cycle"))
brsimN5fig1
pdf("brsimN5fig1.pdf", width = 5, height = 3)
brsimN5fig1
dev.off()
brsimN5fig1 <- ggplot(brsimN5taudf, aes(x = tnow, y = taustar)) + geom_line(aes(colour = cycle, group = cycle)) +
xlab(expression(t[now])) + ylab(expression(paste(tau[as.symbol(*)]^(t[now]), (t[now])))) +
guides(colour = guide_legend(title="Cycle"))
brsimN5fig1 <- ggplot(brsimN5taudf, aes(x = tnow, y = taustar)) + geom_line(aes(colour = cycle, group = cycle)) +
xlab(expression(t[now])) + ylab(expression(paste(tau[as.name(*)]^(t[now]), (t[now])))) +
guides(colour = guide_legend(title="Cycle"))
brsimN5fig1 <- ggplot(brsimN5taudf, aes(x = tnow, y = taustar)) + geom_line(aes(colour = cycle, group = cycle)) +
xlab(expression(t[now])) + ylab(expression(paste(tau[\*]^(t[now]), (t[now])))) +
guides(colour = guide_legend(title="Cycle"))
brsimN5fig1 <- ggplot(brsimN5taudf, aes(x = tnow, y = taustar)) + geom_line(aes(colour = cycle, group = cycle)) +
xlab(expression(t[now])) + ylab(expression(paste(tau[asterisk]^(t[now]), (t[now])))) +
guides(colour = guide_legend(title="Cycle"))
pdf("brsimN5fig1.pdf", width = 5, height = 3)
brsimN5fig1
dev.off()
brsimN5fig1 <- ggplot(brsimN5taudf, aes(x = tnow, y = taustar)) + geom_line(aes(colour = cycle, group = cycle)) +
xlab(expression(t[now])) + ylab(expression(paste(tau["*"]^(t[now]), (t[now])))) +
guides(colour = guide_legend(title="Cycle"))
pdf("brsimN5fig1.pdf", width = 5, height = 3)
brsimN5fig1
dev.off()
source('~/work/weibull-papers/cbm-rbd/cbm-sim.R')
source('~/work/weibull-papers/cbm-rbd/cbm-sim.R')
brsimN5 <- simNcycle(sys = br, ctypes = brctypes, compfts = brcompftssim1, n0y0 = brn0y0, beta = brbeta,
tnowstep = 0.1, hor = 4, tprep = 0.5, trepa = 0, seqlen = 401)
source('~/work/weibull-papers/cbm-rbd/cbm-sim.R')
brsimN5 <- simNcycle(sys = br, ctypes = brctypes, compfts = brcompftssim1, n0y0 = brn0y0, beta = brbeta,
tnowstep = 0.1, hor = 4, tprep = 0.5, trepa = 0, seqlen = 401)
weighted.mean(brsimN5$costrate, brsimN5$tend)
brsimN5fig1 <- ggplot(brsimN5$res, aes(x = tnow, y = taustar)) + guides(colour = guide_legend(title="Cycle")) +
geom_line(aes(colour = cycle, group = cycle)) + geom_point(aes(colour = cycle, group = cycle)) +
xlab(expression(t[now])) + ylab(expression(paste(tau["*"]^(t[now]), (t[now]))))
pdf("brsimN5fig1.pdf", width = 5, height = 3)
brsimN5fig1
dev.off()
brsimN5fig1 <- ggplot(brsimN5$res, aes(x = tnow, y = taustar)) +
geom_line(aes(colour = cycle, group = cycle)) + geom_point(aes(colour = cycle, group = cycle)) +
xlab(expression(t[now])) + ylab(expression(paste(tau["*"]^(t[now]), (t[now])))) +
guides(colour = guide_legend(title="Cycle")) + scale_y_continuous(breaks=seq(0, 2, by=0.5), minor_breaks=seq(0, 2, by=0.25))
pdf("brsimN5fig1.pdf", width = 5, height = 3)
brsimN5fig1
dev.off()
sapply(brcompftssim1, function(x) x[2])
sort(sapply(brcompftssim1, function(x) x[2]))
sort(sapply(brcompftssim1, function(x) x[1]))
sort(sapply(brcompftssim1, function(x) x[3]))
sort(sapply(brcompftssim1, function(x) x[4]))
sort(sapply(brcompftssim1, function(x) x[5]))
brWeibullData <- function(ncycles, beta, mttf){
C1sim1 <- rweibull(ncycles, shape = beta[1], scale = (failuretolambda(mttf[1], beta[1]))^(1/beta[1]))
C2sim1 <- rweibull(ncycles, shape = beta[1], scale = (failuretolambda(mttf[1], beta[1]))^(1/beta[1]))
C3sim1 <- rweibull(ncycles, shape = beta[1], scale = (failuretolambda(mttf[1], beta[1]))^(1/beta[1]))
C4sim1 <- rweibull(ncycles, shape = beta[1], scale = (failuretolambda(mttf[1], beta[1]))^(1/beta[1]))
Hsim1  <- rweibull(ncycles, shape = beta[2], scale = (failuretolambda(mttf[2], beta[2]))^(1/beta[2]))
Msim1  <- rweibull(ncycles, shape = beta[3], scale = (failuretolambda(mttf[3], beta[3]))^(1/beta[3]))
P1sim1 <- rweibull(ncycles, shape = beta[4], scale = (failuretolambda(mttf[4], beta[4]))^(1/beta[4]))
P2sim1 <- rweibull(ncycles, shape = beta[4], scale = (failuretolambda(mttf[4], beta[4]))^(1/beta[4]))
P3sim1 <- rweibull(ncycles, shape = beta[4], scale = (failuretolambda(mttf[4], beta[4]))^(1/beta[4]))
P4sim1 <- rweibull(ncycles, shape = beta[4], scale = (failuretolambda(mttf[4], beta[4]))^(1/beta[4]))
list(C1 = C1sim1, C2 = C2sim1, C3 = C3sim1, C4 = C4sim1, H = Hsim1,
M = Msim1, P1 = P1sim1, P2 = P2sim1, P3 = P3sim1, P4 = P4sim1)
}
set.seed(1328)
brcompftssim1 <- brWeibullData(5, brbeta, brmttf)
sort(sapply(brcompftssim1, function(x) x[1]))
sort(sapply(brcompftssim1, function(x) x[2]))
brsimN51 <- brsimN5
weighted.mean(brsimN51$costrate, brsimN51$tend)
brsimN51fig1 <- ggplot(brsimN51$res, aes(x = tnow, y = taustar)) +
geom_line(aes(colour = cycle, group = cycle)) + geom_point(aes(colour = cycle, group = cycle)) +
xlab(expression(t[now])) + ylab(expression(paste(tau["*"]^(t[now]), (t[now])))) +
guides(colour = guide_legend(title="Cycle")) + scale_y_continuous(breaks=seq(0, 2, by=0.5), minor_breaks=seq(0, 2, by=0.25))
pdf("brsimN51fig1.pdf", width = 5, height = 3)
brsimN51fig1
dev.off()
sort(sapply(brcompftssim1, function(x) x[1]))
set.seed(1328)
brcompftssim1 <- brWeibullData(5, brbeta, brmttf)
brcompftssim2 <- brWeibullData(5, brbeta, brmttf)
brsimN52 <- simNcycle(sys = br, ctypes = brctypes, compfts = brcompftssim2, n0y0 = brn0y0, beta = brbeta,
tnowstep = 0.1, hor = 4, tprep = 0.5, trepa = 0, seqlen = 401)
brsimN52$downtime; brsimN52$tend; brsimN52$costrate
weighted.mean(brsimN52$costrate, brsimN52$tend)
brsimN52fig1 <- ggplot(brsimN52$res, aes(x = tnow, y = taustar)) +
geom_line(aes(colour = cycle, group = cycle)) + geom_point(aes(colour = cycle, group = cycle)) +
xlab(expression(t[now])) + ylab(expression(paste(tau["*"]^(t[now]), (t[now])))) +
guides(colour = guide_legend(title="Cycle")) + scale_y_continuous(breaks=seq(0, 2, by=0.5), minor_breaks=seq(0, 2, by=0.25))
pdf("brsimN52fig1.pdf", width = 5, height = 3)
brsimN52fig1
dev.off()
sort(sapply(brcompftssim1, function(x) x[1]))
sort(sapply(brcompftssim2, function(x) x[1]))
sort(sapply(brcompftssim2, function(x) x[2]))
sort(sapply(brcompftssim2, function(x) x[3]))
sort(sapply(brcompftssim2, function(x) x[4]))
sort(sapply(brcompftssim2, function(x) x[5]))
library(actuar) # provides dinvgamma(x, shape, scale) where shape = alpha and scale = beta
library(ReliabilityTheory)
library(ggplot2)
library(reshape2)
library(gridExtra)
set.seed(1328)
brcompftssim1 <- brWeibullData(5, brbeta, brmttf)
brcompftssim2 <- brWeibullData(5, brbeta, brmttf)
brcompftssim3 <- brWeibullData(5, brbeta, brmttf)
brsimN53 <- simNcycle(sys = br, ctypes = brctypes, compfts = brcompftssim3, n0y0 = brn0y0, beta = brbeta,
tnowstep = 0.1, hor = 4, tprep = 0.5, trepa = 0, seqlen = 401)
brsimN53$downtime; brsimN53$tend; brsimN53$costrate
weighted.mean(brsimN53$costrate, brsimN53$tend)
head(brsimN53$res)
head(brghist1)
brghist1[120:125,]
brghist1[124:129,]
brsimN51$downtime; brsimN51$tend; brsimN51$costrate
weighted.mean(brsimN51$costrate, brsimN51$tend)
0.2 / 1.27
5*1.27
sum(brsimN51$tend)
brsimN53$downtime; brsimN53$tend; brsimN53$costrate
weighted.mean(brsimN53$costrate, brsimN53$tend)
brsimN53fig1 <- ggplot(brsimN53$res, aes(x = tnow, y = taustar)) +
geom_line(aes(colour = cycle, group = cycle)) + geom_point(aes(colour = cycle, group = cycle)) +
xlab(expression(t[now])) + ylab(expression(paste(tau["*"]^(t[now]), (t[now])))) +
guides(colour = guide_legend(title="Cycle")) + scale_y_continuous(breaks=seq(0, 2, by=0.5), minor_breaks=seq(0, 2, by=0.25))
pdf("brsimN53fig1.pdf", width = 5, height = 3)
brsimN53fig1
dev.off()
?repeat
)
?repeat()
?"repeat"
